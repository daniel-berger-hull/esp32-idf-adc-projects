
Future:
* Draw the signal on the Canvas? (instead of the packet received)

* Break down the .js into sub .js files. This would need to ECMAScript modules.
  Here is articles on this:

    https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file



to Do:

      
   *Adjust the label on the x Axis to reflect the real time when frame a received 
    (0,1,2,3,4 is not usefull but 0ms, 100ms, etc would be better)
   
   *Adjust the y label, to reflect the size of the frame received
    (0,1,2,3,4 is not usefull but 100bytes, 500bytes, etc would be better)

   *Create a NodeJS project in the resources folder, as it could be a simulator to replace the ESP32
     (When you have no ESP32 board with you)

   *Fix the number of bars: There is on extra bar drawn (i.e if 4 frames asked --> 5 bar will be draw)

June 14
=======

  Replaced the time with method performance.now(),  for a better time mesurement
  Corrected HTML's start/stop button when  no connection is done with ESP32 (switch control not flipped)
  Removed the Transfer rate section (slider, labels and value display, as not used in project)
  Corrected the CSS of the control boxes, as they were stetching to cover all the screen
  HTML detects when the number of expected frames (in the textbox count) is reached
     --> Toggle the Start/Stop button
     --> Trigger a redraw of the Frame Canvas





June 13
=======

 Collecting the time  and size of the frame received messages
 Drawing on the frame canvas reflects the time of reception of frames
 Frame overlapping (appears to be received at the same time on the client) identified with a count

 
 

June 12
=======

* Drawing correct axis label on frame canvas
* Added a clear button on frame canvas

To Do: Collect the time of the frame are received
       adapt the drawing in the frame canvas, to reflect the time of reception of frame 
       Adjust the labels on the x axis of canvas, to be from 0mSec to X mSec
       Adjust the labels on the y to fit the size of the frame received.
       ` 

June 7
======

  Extracted the css and javascript into their own .css and .js file, and are served to client by the ESP32
  Added another Canvas, that will be used to draw the signal received by the ESP32 and sent to the client page

  To Do:
    Write the numbers in the axis for the frame received
    Add methods to draw for the signal canvas

June 6
======

   Added a second index2.html (Which is a backup of work prior to today)
   Added a Canvas to the HTML page, and it can draw the axis (no data yet)

June 3
======


   Activated the switch button --> The connection close and open with the switch
   Note: The connection is closed, but nothing appears to be send to the ESP32...

   To: 
     Analysis the close socket on the ESP32 side...
     create a second index.html, but with the canvas ...

 
June 1
======


  Added frame number to be sent in the HTML, with validation (has to be from 1 to 10 frames)
  Modifed ESP32 to accept the number of frame to be returned
  Added a validation the payload size in the HTML 

  Note: Tried to split the User command into its own .c file, but the linker failed to find the methods

  To Do:

  Activate the switch button --> Close the Web Socket
  Start to record the time where the frames are received
  Try to have multiple source file (fix the linker probleme)

  To Do 2:
  Add the Canvas into the page


May 31
======

  
  Modified the ESP32 access the size of the wanted payload
  Add an input control on the HTML, and passing the size of the wanted payload to ESP32

  
  Note: 
    The time to send async payload of around 50K is 200-300 mSec. Which is not bad...
    Larger payload, like 150K will make the ESP32 crash

 To To:
  complete the Toggle Control:
    Check here for detailshttps://www.geeksforgeeks.org/how-to-create-toggle-switch-by-using-html-and-css/
  Add a way to close/open the websocket with the Toggle Control

May 30
======

  Finally got a real asyn server push. 
  Binary data is sent back to the html and it still works..
  Been able to send up to 100 bytes to the client, and it is very fast!


To Do:
  * HTML to be to:
      - ask for the size of the payload to be returned by the ESP32
      - ask how many frame to be returned by ESP32 
        (been able to send 3 frames back to back in the ws_flex_async_send and worked ok)
      - Connect and Disconnect the web socket (add a switch on the HTML)
 * Test the bandwidth we can reach in the server push (how big, how fast, etc)

  * echo_handler method should not try to create a  httpd_ws_frame_t object 
    (it is done now somewhere else)



May 28 
================

Still trying to find a way to send bigger payload when the ESP32 reply to the HTML page (a ping message).

The WebSocket code on the ESP32 is using the method 'httpd_ws_send_frame' and not the one I tought ('trigger_async_send').

The problem resides in building a return frame, and find the right way to force the 'httpd_ws_recv_frame'
to accept a payload lenght that is bigger than 4 (the initial size of the message 'ping' from the HTML page)


May 27 (Update)
================


Check this video, as it may have a very good element of a solution to the websocket problem
   https://www.youtube.com/watch?v=fmZok-zgXRg

It points to the following Code:

https://github.com/SIMS-IOT-Devices/FreeRTOS-ESP-IDF-WebSockets-Server

Note: I may need to enable the WebSocket, in the menu config of the ESP32

Note2:  That one appears very promising too. It include a web page written on the SPIFF!
        And led to control..

      https://esp32tutorials.com/esp32-esp-idf-websocket-web-server/

May 27
======

 Added a callback function on the ESP32: It tries to call the HTML page
 Tried the HTML page in the testscript folder, but it doesnt work

 NOTE: After some thoughts, the current Javascript in the resources\index.html does NOT create a websocket!
       I just tries to connect to the ESP32 with a regular HTTP request (with a XMLHttpRequest object).
       The javascript in the other folder (testscript) is maybe too agressive: It tries to open a web socket
       at load time...

     Explore the following example I created with NodeJS (Has a nice page also)
        C:\data\workspaces\Javascript\Basics\websockets\simpletest
    


 To Do:
    Need to add web socket method in the HTML that works

    



May 24
======

 Try to debug using gdb (ESP32 has the stenxa-gbd)
 Appears to be easier if using Eclipse

May 22
=======

 Implemented a start and stop method in the main.c and inside the index.html.
 The events on the ESP32 are received and the app is reacting ok.
 Create a thread to transfer and  blink the green light --> Will indicate when transfer to client is in progress...

 Error: You can't exit a worker thread that you created with the xTaskCreate method!
        Once you exit the while loop of the thread, the ESP32 reboots!
        Worked around the problem by not leaving the working thread, but there should be a more
        elegent way...

 To Do:
   Find how to send data back to client: So far, I only rely to HTTP GET, which give all the context.
   Next is to send HTTP data (with ws_async_send method), but from a thread???

   

May 21
=======
  
  ws_echo_server: Did add a slider to the HTML page, to control the transfer rate

  To Do:
    Need to find a method that the ESP32 send data (one way only) to the HTML page
    Add a Start http method, so that the ESP32 can know when to start the transfer to the web page
    Add a Stop http method (opposite of start)
    Note: Where to pass the transfer rate? As param in the start http method? Or add a seperated method?

    


May 15
=======

  *** Analysis of the problem of 'cancel request' with the project HTTPServer_ADCdisplay ***

  Finding #1: 
  The HTTP transaction on ESP32 appears to have a latency in the mSec, regardless of the content size.
  Re tried with the 'simple' code example, and end up with the following Payload size / time:
      
                                    Size        Response time
                                    142B    --> 381 mSec
                                    8.8Kb   --> 409 mSec
                                    96Kb    --> 698 mSec
    
  This show that it takes a lot of time of the ESP32 to respond, even if few bytes are returned (142B is almost nothing)

  Finding #2: 
  There is a way to keep your socket, and the project 'protocols\http_server\persistent_sockets' shows how
  But it may not fix the problem

  Finding #3: 
  Perhaps, the most viable path is to use web sockets. I tried and it appears to be promising...
  See the project 
            \esp32-idf-adc-projects\ws_echo_server

   To Do:
     Try to have faster request rate and see what happens (currently 5 sec, so way too much)
     Try to send bigger payload
     Try to have the server send data on periodic interval, and not only echo from the client HTML page (what is curently done)
     Try to have a better HTML page (the current one is only a white page)




May 13
=======

  
  Added a ADC thread and it sends the value red to the HTML page.
  A red led is blinking, when reading is done.
  Increase the Javascript HTTP call rate (every200 mSec)
  

  Warning: A LOT of HTTP calls are canceld!
           Try to understand why...




Study carefully all the method of the main.c (some are GET some are POST)

May 6
=====

Wrote a Python script to take an HTML document and translate it into a C-string that can be added into main.c
and served as web page by the server.

Display Analog read on page
   create a timer on the web page that send HTTP query and fetch values values 

May 2
=====

 Modified the simpleHTTPServer to blink the green led, using a seperated Thread
 Added the registration to serve an index.html file (http://10.0.0.250/index.html)
 Used the HTML string of the '\WiFiServer\webserver_with_led' to serve an HTML

 To Do:
   To serve an HTML document, the HTML as to be concerted to be a C string. Find an tool that does that
   Add buttons and control on the index.html page
   ESP32 to start to react to commands from the index.html 


May 1
=====

Tested a simple thread that blinks led (esp32-idf\Blink\blink project)

Tested (and worked) the http_server from the example.
Copied project here (Working):  
   C:\data\Electronic\workspace\esp32-idf\WiFiServer\simpleHTTPServer
   
  NOTE: The ssid and password need to be modified in the common 
         \examples\common_components\protocol_examples_common\include


To Do:
   * Continue to study the example
   * Add more GET methods that the server can reply to
   * Add an internal thread, like flashing a LED
   * Should try to extract the common code int the protocol_examples_common and merge   into main.c

   

April 25
=========

 Started the idf on the DanServerPC. Been able to build and flash few examples,
 like the Blink, the Wifi SoftAP and Wifi Station.

To Do:
 Need to try ADC project
 Then try an ADC with DMA (continus conversion may be a candiate?)