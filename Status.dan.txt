

May 15
=======

  *** Analysis of the problem of 'cancel request' with the project HTTPServer_ADCdisplay ***

  Finding #1: 
  The HTTP transaction on ESP32 appears to have a latency in the mSec, regardless of the content size.
  Re tried with the 'simple' code example, and end up with the following Payload size / time:
      
                                    Size        Response time
                                    142B    --> 381 mSec
                                    8.8Kb   --> 409 mSec
                                    96Kb    --> 698 mSec
    
  This show that it takes a lot of time of the ESP32 to respond, even if few bytes are returned (142B is almost nothing)

  Finding #2: 
  There is a way to keep your socket, and the project 'protocols\http_server\persistent_sockets' shows how
  But it may not fix the problem

  Finding #3: 
  Perhaps, the most viable path is to use web sockets. I tried and it appears to be promising...
  See the project 
            \esp32-idf-adc-projects\ws_echo_server

   To Do:
     Try to have faster request rate and see what happens (currently 5 sec, so way too much)
     Try to send bigger payload
     Try to have the server send data on periodic interval, and not only echo from the client HTML page (what is curently done)
     Try to have a better HTML page (the current one is only a white page)


May 13
=======

  
  Added a ADC thread and it sends the value red to the HTML page.
  A red led is blinking, when reading is done.
  Increase the Javascript HTTP call rate (every200 mSec)
  

  Warning: A LOT of HTTP calls are canceld!
           Try to understand why...




Study carefully all the method of the main.c (some are GET some are POST)

May 6
=====

Wrote a Python script to take an HTML document and translate it into a C-string that can be added into main.c
and served as web page by the server.

Display Analog read on page
   create a timer on the web page that send HTTP query and fetch values values 

May 2
=====

 Modified the simpleHTTPServer to blink the green led, using a seperated Thread
 Added the registration to serve an index.html file (http://10.0.0.250/index.html)
 Used the HTML string of the '\WiFiServer\webserver_with_led' to serve an HTML

 To Do:
   To serve an HTML document, the HTML as to be concerted to be a C string. Find an tool that does that
   Add buttons and control on the index.html page
   ESP32 to start to react to commands from the index.html 


May 1
=====

Tested a simple thread that blinks led (esp32-idf\Blink\blink project)

Tested (and worked) the http_server from the example.
Copied project here (Working):  
   C:\data\Electronic\workspace\esp32-idf\WiFiServer\simpleHTTPServer
   
  NOTE: The ssid and password need to be modified in the common 
         \examples\common_components\protocol_examples_common\include


To Do:
   * Continue to study the example
   * Add more GET methods that the server can reply to
   * Add an internal thread, like flashing a LED
   * Should try to extract the common code int the protocol_examples_common and merge   into main.c

   

April 25
=========

 Started the idf on the DanServerPC. Been able to build and flash few examples,
 like the Blink, the Wifi SoftAP and Wifi Station.

To Do:
 Need to try ADC project
 Then try an ADC with DMA (continus conversion may be a candiate?)